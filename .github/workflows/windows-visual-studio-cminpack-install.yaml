name: MSVC - Install cminpack on Windows through CMake
run-name: MSVC - Build, test and install cminpack on Windows through CMake
on: [push, pull_request]

jobs:
  cminpack-visual-studio:
    name: cminpack (MSVC ABI-compatible toolchain + CMake)
    runs-on: windows-latest
    
    defaults:
      run:
        shell: cmd
    
    strategy:
      matrix:
        CMINPACK_BUILD_SHARED_LIBS: [ 'ON' , 'OFF' ]
        CMINPACK_BUILD_TYPE: [ 'Release' ]
        CMINPACK_PRECISION: [ 'd' ] # seems to be the only precision that the current tests reference work
        USE_BLAS: ['ON']
        C_CXX_COMPILER: ['clang-cl']

        include:
          - USE_BLAS: 'ON'
            BLAS_VERSION: '3.12.0'
    
    env:
      CMINPACK_BUILD_DIR: >-
        %RUNNER_TEMP%\cminpack-build-shared-libs-${{ matrix.CMINPACK_BUILD_SHARED_LIBS }}-build-type-${{ matrix.CMINPACK_BUILD_TYPE }}-precision-${{ matrix.CMINPACK_PRECISION }}
      CMINPACK_INSTALL_DIR: >-
        %RUNNER_TEMP%\cminpack-install-shared-libs-${{ matrix.CMINPACK_BUILD_SHARED_LIBS }}-build-type-${{ matrix.CMINPACK_BUILD_TYPE }}-precision-${{ matrix.CMINPACK_PRECISION }}

    steps:
      # In order to build
      # and test cminpack with BLAS,
      # we build BLAS from source code.
      #
      # To build BLAS from the sources,
      # we need a Fortran compiler
      # that must be ABI-compatible
      # with MSVC toolchain.
      #
      # We have a few (good) choices at the moment:
      #   1. Intel LLVM Fortran compiler (ifx)
      #   2. Intel classic Fortran compiler (ifort)
      #   3. LLVM flang-new compiler
      #
      # The installation process for ifx or ifort
      # on Windows is slow.
      # Thus, we stick to
      #   3. LLVM flang-new compiler.
      #
      # To use LLVM flang-new compiler,
      # we have to:
      #   - Install Ninja
      #   - Setup miniconda
      #   - Install LLVM flang-new compiler
      #     from miniconda,
      #     using conda-forge channel.
      #   - Set environment variables
      #     for CMake:
      #       -- FC: Fortran compiler
      #       -- CC: C compiler
      #       -- CXX: C++ compiler

      - name: Install Ninja
        if: ${{ matrix.USE_BLAS == 'ON' }}
        run: choco install ninja

      - name: Setup miniconda
        if: ${{ matrix.USE_BLAS == 'ON' }}
        uses: conda-incubator/setup-miniconda@v3
        with:
          channels: conda-forge
          activate-environment: cminpack
      
      - name: Install LLVM flang-new
        if: ${{ matrix.USE_BLAS == 'ON' }}
        run: conda install -n cminpack flang libflang libfortran-main
      
      - name: Set environment variables to use LLVM flang-new
        if: ${{ matrix.USE_BLAS == 'ON' }}
        shell: pwsh
        run: |
          Add-Content $env:GITHUB_ENV "FC=flang-new";
          Add-Content $env:GITHUB_ENV "CC=${{ matrix.C_CXX_COMPILER }}";
          Add-Content $env:GITHUB_ENV "CXX=${{ matrix.C_CXX_COMPILER }}";
          Add-Content $env:GITHUB_ENV "BLAS_SOURCE_DIR=" + (Join-Path -Path $env:RUNNER_TEMP -ChildPath "lapack-${{ matrix.BLAS_VERSION }}");
          Add-Content $env:GITHUB_ENV "BLAS_BUILD_DIR=" + (Join-Path -Path $env:RUNNER_TEMP -ChildPath "build-${{ matrix.BLAS_VERSION }}");
          Add-Content $env:GITHUB_ENV "BLAS_INSTALL_DIR=" + (Join-Path -Path $env:RUNNER_TEMP -ChildPath "install-${{ matrix.BLAS_VERSION }}");
      
      - name: Download and extract BLAS
        if: ${{ matrix.USE_BLAS == 'ON' }}
        shell: pwsh
        run: |
          $blas_zip_file = Join-Path $env:RUNNER_TEMP -ChildPath blas.zip;
          $ProgressPreference = 'SilentlyContinue';
          Invoke-WebRequest -Uri https://github.com/Reference-LAPACK/lapack/archive/refs/tags/v${{ matrix.BLAS_VERSION }}.zip -OutFile $blas_zip_file;
          Expand-Archive -Path $blas_zip_file -DestinationPath $env:RUNNER_TEMP;
      
      - name: Configure BLAS
        if: ${{ matrix.USE_BLAS == 'ON' }}
        run: cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=OFF --install-prefix %BLAS_INSTALL_DIR% -S %BLAS_SOURCE_DIR% -B %BLAS_BUILD_DIR%
      
      - name: Build BLAS
        if: ${{ matrix.USE_BLAS == 'ON' }}
        run: cmake --build %BLAS_BUILD_DIR% --config Release

      - name: Install BLAS
        if: ${{ matrix.USE_BLAS == 'ON' }}
        run: cmake --install %BLAS_BUILD_DIR% --config Release
      
      - name: Place BLAS in front of CMAKE_PREFIX_PATH and PATH environment variables
        if: ${{ matrix.USE_BLAS == 'ON' }}
        shell: pwsh
        run: |
          Add-Content $env:GITHUB_ENV "CMAKE_PREFIX_PATH=$env:BLAS_INSTALL_DIR;$env:CMAKE_PREFIX_PATH"
          Add-Content $env:GITHUB_PATH (Join-Path -Path $env:BLAS_INSTALL_DIR -ChildPath bin)

      - name: Checkout repository to cminpack directory
        uses: actions/checkout@v4
        with:
          path: cminpack
      
      - name: Configure cminpack build
        run: cmake -DBUILD_SHARED_LIBS=${{ matrix.CMINPACK_BUILD_SHARED_LIBS }} -DCMAKE_BUILD_TYPE=${{ matrix.CMINPACK_BUILD_TYPE }} -DCMINPACK_PRECISION=${{ matrix.CMINPACK_PRECISION }} -DUSE_BLAS=${{ matrix.USE_BLAS }} --install-prefix ${{ env.CMINPACK_INSTALL_DIR }} -S cminpack -B ${{ env.CMINPACK_BUILD_DIR }}
      
      - name: Build cminpack
        run: cmake --build ${{ env.CMINPACK_BUILD_DIR }} --config ${{ matrix.CMINPACK_BUILD_TYPE }}
      
      - name: Test cminpack
        run: ctest --test-dir ${{ env.CMINPACK_BUILD_DIR }} --build-config ${{ matrix.CMINPACK_BUILD_TYPE }}
      
      - name: Install cminpack
        run: cmake --install ${{ env.CMINPACK_BUILD_DIR }} --config ${{ matrix.CMINPACK_BUILD_TYPE }}
      
      - name: Delete checkout directory
        run: rmdir /S /Q cminpack
      
      - name: Delete build directory
        run: rmdir /S /Q ${{ env.CMINPACK_BUILD_DIR }}
      
      - name: Delete install directory
        run: rmdir /S /Q ${{ env.CMINPACK_INSTALL_DIR }}
